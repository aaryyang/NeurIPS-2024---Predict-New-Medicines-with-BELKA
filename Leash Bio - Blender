{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a9e6b763",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T04:33:48.319621Z",
     "iopub.status.busy": "2024-07-14T04:33:48.318482Z",
     "iopub.status.idle": "2024-07-14T04:33:49.342707Z",
     "shell.execute_reply": "2024-07-14T04:33:49.341324Z"
    },
    "papermill": {
     "duration": 1.033151,
     "end_time": "2024-07-14T04:33:49.345818",
     "exception": false,
     "start_time": "2024-07-14T04:33:48.312667",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a1e4f471",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T04:33:49.356870Z",
     "iopub.status.busy": "2024-07-14T04:33:49.355283Z",
     "iopub.status.idle": "2024-07-14T04:33:54.778833Z",
     "shell.execute_reply": "2024-07-14T04:33:54.777746Z"
    },
    "papermill": {
     "duration": 5.43157,
     "end_time": "2024-07-14T04:33:54.781678",
     "exception": false,
     "start_time": "2024-07-14T04:33:49.350108",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sub_1 = pd.read_csv('/kaggle/input/leash-bio-blender/sub_1.csv')\n",
    "sub_2 = pd.read_csv('/kaggle/input/leash-bio-blender/sub_2.csv')\n",
    "sub_3 = pd.read_csv('/kaggle/input/leash-bio-blender/sub_3.csv')\n",
    "sub_4 = pd.read_csv('/kaggle/input/leash-bio-blender/sub_4.csv')\n",
    "sub_5 = pd.read_csv('/kaggle/input/leash-bio-blender/sub_5.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "57539f6a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T04:33:54.791230Z",
     "iopub.status.busy": "2024-07-14T04:33:54.790830Z",
     "iopub.status.idle": "2024-07-14T04:34:04.109830Z",
     "shell.execute_reply": "2024-07-14T04:34:04.108109Z"
    },
    "papermill": {
     "duration": 9.327391,
     "end_time": "2024-07-14T04:34:04.113051",
     "exception": false,
     "start_time": "2024-07-14T04:33:54.785660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          id     binds\n",
      "0  295246830  0.145640\n",
      "1  295246831  0.100159\n",
      "2  295246832  0.030356\n",
      "3  295246833  0.161389\n",
      "4  295246834  0.153367\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the test predictions\n",
    "sub_1 = pd.read_csv('/kaggle/input/leash-bio-blender/sub_1.csv')\n",
    "sub_2 = pd.read_csv('/kaggle/input/leash-bio-blender/sub_2.csv')\n",
    "sub_3 = pd.read_csv('/kaggle/input/leash-bio-blender/sub_3.csv')\n",
    "sub_5 = pd.read_csv('/kaggle/input/leash-bio-blender/sub_5.csv')\n",
    "sub = pd.read_csv('/kaggle/input/leash-BELKA/sample_submission.csv')\n",
    "\n",
    "# Manually adjust the weights\n",
    "weights =[0.50, 0.30, 0.10, 0.10] # Try different combinations of weights\n",
    "\n",
    "# Create the final ensemble prediction with adjusted weights\n",
    "sub['binds'] = (sub_1['binds'] * weights[0] +\n",
    "                sub_2['binds'] * weights[1] +\n",
    "                sub_3['binds'] * weights[2] +\n",
    "                sub_5['binds'] * weights[3])\n",
    "\n",
    "# Save the new submission file\n",
    "sub.to_csv('adjusted4_submission.csv', index=False)\n",
    "\n",
    "# Display the first few rows of the final submission DataFrame\n",
    "print(sub.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "35aa3b82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T04:34:04.122963Z",
     "iopub.status.busy": "2024-07-14T04:34:04.122524Z",
     "iopub.status.idle": "2024-07-14T04:34:04.558252Z",
     "shell.execute_reply": "2024-07-14T04:34:04.557096Z"
    },
    "papermill": {
     "duration": 0.444348,
     "end_time": "2024-07-14T04:34:04.561358",
     "exception": false,
     "start_time": "2024-07-14T04:34:04.117010",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sub = pd.read_csv('/kaggle/input/leash-BELKA/sample_submission.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9b3336ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T04:34:04.570901Z",
     "iopub.status.busy": "2024-07-14T04:34:04.570495Z",
     "iopub.status.idle": "2024-07-14T04:34:04.593895Z",
     "shell.execute_reply": "2024-07-14T04:34:04.592651Z"
    },
    "papermill": {
     "duration": 0.031486,
     "end_time": "2024-07-14T04:34:04.596926",
     "exception": false,
     "start_time": "2024-07-14T04:34:04.565440",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sub['binds'] = sub_1['binds']*0.57 + sub_2['binds']*0.14 + sub_3['binds']*0.11 + sub_5['binds']*0.18"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "eabd64a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T04:34:04.606188Z",
     "iopub.status.busy": "2024-07-14T04:34:04.605779Z",
     "iopub.status.idle": "2024-07-14T04:34:10.688759Z",
     "shell.execute_reply": "2024-07-14T04:34:10.687706Z"
    },
    "papermill": {
     "duration": 6.090928,
     "end_time": "2024-07-14T04:34:10.691646",
     "exception": false,
     "start_time": "2024-07-14T04:34:04.600718",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sub.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7a77b846",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-14T04:34:10.701067Z",
     "iopub.status.busy": "2024-07-14T04:34:10.700678Z",
     "iopub.status.idle": "2024-07-14T04:34:10.715854Z",
     "shell.execute_reply": "2024-07-14T04:34:10.714579Z"
    },
    "papermill": {
     "duration": 0.022985,
     "end_time": "2024-07-14T04:34:10.718504",
     "exception": false,
     "start_time": "2024-07-14T04:34:10.695519",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>binds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>295246830</td>\n",
       "      <td>0.092253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>295246831</td>\n",
       "      <td>0.068691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>295246832</td>\n",
       "      <td>0.025533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>295246833</td>\n",
       "      <td>0.100723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>295246834</td>\n",
       "      <td>0.096126</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          id     binds\n",
       "0  295246830  0.092253\n",
       "1  295246831  0.068691\n",
       "2  295246832  0.025533\n",
       "3  295246833  0.100723\n",
       "4  295246834  0.096126"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sub.head()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 8006601,
     "sourceId": 67356,
     "sourceType": "competition"
    },
    {
     "datasetId": 5272487,
     "sourceId": 8799773,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 26.122372,
   "end_time": "2024-07-14T04:34:11.244362",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-14T04:33:45.121990",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
